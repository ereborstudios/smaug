use crate::project_config::ProjectConfig;
use directories::ProjectDirs;
use std::fs;
use std::path::Path;
use std::path::PathBuf;
use std::process;

pub fn dragonruby_platform() -> &'static str {
  #[cfg(target_os = "windows")]
  return "windows-amd64";

  #[cfg(target_os = "macos")]
  return "macos";

  return "linux-amd64";
}

pub fn dragonruby_directory() -> PathBuf {
  let destination: &Path;
  let directory_name = format!("dragonruby-{}", dragonruby_platform());
  let project_dirs = ProjectDirs::from("org", "Erebor Studios", "Smaug");

  match project_dirs {
    Some(ref dirs) => {
      destination = dirs.data_dir();
    }
    None => {
      println!("No data directories found");
      process::exit(exitcode::OSFILE);
    }
  }

  return destination.join(directory_name);
}

pub fn ensure_installed() {
  if !dragonruby_directory().exists() {
    println!("Install DragonRuby with \"smaug install PATH_TO_DRAGONRUBY_ZIP\"");
    process::exit(exitcode::UNAVAILABLE);
  }
}

pub fn ensure_smaug_project(project: &Path) {
  let config_path = project.join("metadata/game_metadata.txt");

  if !config_path.exists() {
    println!("This is not a Smaug project. Initialize one with \"smaug init .\".");
    process::exit(exitcode::CONFIG);
  }
}

pub fn generate_metadata(project: &Path) {
  let config_path = project.join("Smaug.toml");
  let config = ProjectConfig::load(config_path);
  let metadata_dir = project.join("metadata");

  fs::create_dir_all(metadata_dir.as_path()).unwrap();
  let game_metadata = metadata_dir.join("game_metadata.txt");

  let mut metadata = String::new();
  metadata.push_str("# This file is automatically @generated by Smaug.\n");
  metadata.push_str("# Do not edit it manually.\n");

  let author_line = config
    .project
    .author
    .and_then(|author| Some(format!("devtitle={}\n", author)))
    .or_else(|| Some(String::from("#devtitle=My Name\n")))
    .unwrap();

  metadata.push_str(author_line.as_str());

  let icon_line = config
    .project
    .icon
    .and_then(|icon| Some(format!("icon={}\n", icon)))
    .or_else(|| Some(String::from("#icon=metadata/icon.png\n")))
    .unwrap();

  metadata.push_str(icon_line.as_str());

  let name_line = config
    .project
    .name
    .and_then(|name| Some(format!("gametitle={}\n", name)))
    .or_else(|| Some(String::from("#gametitle=My Game\n")))
    .unwrap();

  metadata.push_str(name_line.as_str());

  let version_line = config
    .project
    .version
    .and_then(|version| Some(format!("version={}\n", version)))
    .or_else(|| Some(String::from("#version=0.1\n")))
    .unwrap();

  metadata.push_str(version_line.as_str());

  if config.itch.is_some() {
    let itch = config.itch.unwrap();

    let username_line = itch
      .username
      .and_then(|username| Some(format!("devid={}\n", username)))
      .or_else(|| Some(String::from("#devid=myname\n")))
      .unwrap();

    metadata.push_str(username_line.as_str());

    let url_line = itch
      .url
      .and_then(|url| Some(format!("gameid={}\n", url.split("/").last().unwrap())))
      .or_else(|| Some(String::from("#gameid=mygame\n")))
      .unwrap();
    metadata.push_str(url_line.as_str());
  }

  fs::write(game_metadata, metadata).unwrap();
}
