use crate::project_config::ProjectConfig;
use crate::smaug;
use log::*;
use std::fs;
use std::path::Path;
use std::path::PathBuf;
use std::process;

pub fn dragonruby_platform() -> &'static str {
    #[cfg(target_os = "windows")]
    return "windows-amd64";

    #[cfg(target_os = "macos")]
    return "macos";

    "linux-amd64"
}

pub fn dragonruby_directory() -> PathBuf {
    let directory_name = format!("dragonruby-{}", dragonruby_platform());
    let destination = smaug::data_dir();

    destination.join(directory_name)
}

pub fn ensure_installed() {
    debug!(
        "Looking for DragonRuby directory at {}",
        dragonruby_directory().to_str().unwrap()
    );
    if !dragonruby_directory().exists() {
        smaug::print_error("Install DragonRuby with \"smaug install PATH_TO_DRAGONRUBY_ZIP\"");
        process::exit(exitcode::UNAVAILABLE);
    }
}

pub fn ensure_smaug_project(project: &Path) {
    let config_path = project.join("Smaug.toml");
    debug!(
        "Looking for Smaug Configuration at {}",
        config_path.to_str().unwrap()
    );

    if !config_path.exists() {
        smaug::print_error("This is not a Smaug project. Initialize one with \"smaug init\".");
        process::exit(exitcode::CONFIG);
    }
}

pub fn generate_metadata(project: &Path) {
    trace!("Generating Metadata");
    let config_path = project.join("Smaug.toml");
    trace!(
        "Loading Smaug Configuration from {}",
        config_path.to_str().unwrap()
    );
    let config = ProjectConfig::load(config_path);
    debug!("Smaug Configuration: {:?}", config);
    let metadata_dir = project.join("metadata");

    trace!("Creating Directory: {}", metadata_dir.to_str().unwrap());
    fs::create_dir_all(metadata_dir.as_path()).unwrap();
    let game_metadata = metadata_dir.join("game_metadata.txt");

    let mut metadata = String::new();
    metadata.push_str("# This file is automatically @generated by Smaug.\n");
    metadata.push_str("# Do not edit it manually.\n");

    let author_line = config
        .project
        .author
        .map(|author| format!("devtitle={}\n", author))
        .or_else(|| Some(String::from("#devtitle=My Name\n")))
        .unwrap();

    metadata.push_str(author_line.as_str());

    let icon_line = config
        .project
        .icon
        .map(|icon| format!("icon={}\n", icon))
        .or_else(|| Some(String::from("#icon=metadata/icon.png\n")))
        .unwrap();

    metadata.push_str(icon_line.as_str());

    let name_line = config
        .project
        .name
        .map(|name| format!("gametitle={}\n", name))
        .or_else(|| Some(String::from("#gametitle=My Game\n")))
        .unwrap();

    metadata.push_str(name_line.as_str());

    let version_line = config
        .project
        .version
        .map(|version| format!("version={}\n", version))
        .or_else(|| Some(String::from("#version=0.1\n")))
        .unwrap();

    metadata.push_str(version_line.as_str());

    if config.itch.is_some() {
        let itch = config.itch.unwrap();

        let username_line = itch
            .username
            .map(|username| format!("devid={}\n", username))
            .or_else(|| Some(String::from("#devid=myname\n")))
            .unwrap();

        metadata.push_str(username_line.as_str());

        let url_line = itch
            .url
            .map(|url| format!("gameid={}\n", url.split('/').last().unwrap()))
            .or_else(|| Some(String::from("#gameid=mygame\n")))
            .unwrap();
        metadata.push_str(url_line.as_str());
    }

    trace!("Writing metadata to {}", game_metadata.to_str().unwrap());
    fs::write(game_metadata, metadata).unwrap();
}
