use crate::dragonruby;
use crate::lock::Lock;
use crate::project_config::ProjectConfig;
use crate::smaug;
use log::*;
use std::env;
use std::fs;
use std::io;
use std::path::Path;
use std::process;

pub fn call(matches: &clap::ArgMatches) -> io::Result<()> {
    let current_directory = env::current_dir().unwrap();
    let filename: &str = matches
        .value_of("PATH")
        .unwrap_or_else(|| current_directory.to_str().unwrap());
    let path = Path::new(filename);
    debug!("Project Path: {}", path.to_str().unwrap());

    dragonruby::ensure_smaug_project(path);
    let config = ProjectConfig::load(path.join("Smaug.toml"));
    debug!("Smaug Configuration: {:?}", config);

    let lock_result = Lock::from_config(&config);
    debug!("Lock: {:?}", lock_result);

    match lock_result {
        Ok(lock) => {
            install_packages(&lock, &path)?;
            create_index(&lock, &path)?
        }
        Err(error) => {
            smaug::print_error(format!("Lock file error: {:?}", error));
            process::exit(exitcode::DATAERR);
        }
    }

    Ok(())
}

fn install_packages(lock: &Lock, path: &Path) -> io::Result<()> {
    trace!("Installing packages");
    for file in lock.files.iter() {
        let destination = path.join(file.destination.clone());
        copy_file(&file.clone().source, &destination)?;
    }
    Ok(())
}

fn copy_file(source: &Path, destination: &Path) -> io::Result<()> {
    let directory = destination.parent().unwrap();
    trace!("Creating directory {}", directory.to_str().unwrap());
    fs::create_dir_all(directory)?;

    trace!(
        "Copying file from {} to {}",
        source.to_str().unwrap(),
        destination.to_str().unwrap()
    );
    fs::copy(source, destination)?;
    Ok(())
}

fn create_index(lock: &Lock, path: &Path) -> io::Result<()> {
    trace!("Creating file index");
    let mut index = String::new();
    index.push_str("# This file is automatically @generated by Smaug.\n");
    index.push_str("# Do not edit it manually.\n\n");

    for file in lock.files.iter() {
        index.push_str(format!("require \"{}\"\n", file.destination.to_str().unwrap()).as_str());
    }

    let index_file = path.join("app/smaug.rb");
    fs::write(index_file, index)?;
    Ok(())
}
